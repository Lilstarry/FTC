<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_robot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_Collisiable</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controls
m_up = vk_up
m_left = vk_left
m_right = vk_right
m_down = vk_down

image_speed = 0 // throw state
m_catch = ord('F')
m_throw = ord('Z')

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fixtures

//  Active
m_activeFixture = physics_fixture_create();
physics_fixture_set_box_shape(
    m_activeFixture,
    sprite_get_width(self.sprite_index) / 2,
    sprite_get_height(self.sprite_index) / 2
);
//physics_fixture_set_polygon_shape(m_activeFixture);

//var lastX = sprite_get_width(self.sprite_index) - 1;
//var lastY = sprite_get_height(self.sprite_index) - 1;
//var br = 2; //  catcher's border width
//var cw = sprite_get_width(self.sprite_index); // catcher's width, its 1/3 of sprite width

//physics_fixture_add_point(m_activeFixture, 0, 0);
//physics_fixture_add_point(m_activeFixture, lastX, 0);
//physics_fixture_add_point(m_activeFixture, lastX, lastY);
////physics_fixture_add_point(m_activeFixture, lastX - br, lastY - br);
////physics_fixture_add_point(m_activeFixture, lastX - br, 0 + br);
////physics_fixture_add_point(m_activeFixture, lastX - cw + br, 0 + br);
////physics_fixture_add_point(m_activeFixture, lastX - cw + br, lastY - br);
////physics_fixture_add_point(m_activeFixture, lastX - br, lastY - br);
////physics_fixture_add_point(m_activeFixture, lastX, lastY);
//physics_fixture_add_point(m_activeFixture, 0, lastY);


//  Idle
m_idleFixture = physics_fixture_create();
//physics_fixture_set_polygon_shape(m_idleFixture)
physics_fixture_set_box_shape(
    m_idleFixture,
    sprite_get_width(self.sprite_index) / 3,
    sprite_get_height(self.sprite_index) / 2
);
//var boxLastX = sprite_get_width(self.sprite_index) / 3 * 2 - 1;

//physics_fixture_add_point(m_idleFixture, 0, 0);
//physics_fixture_add_point(m_idleFixture, boxLastX, 0);
//physics_fixture_add_point(m_idleFixture, boxLastX, lastY);
//physics_fixture_add_point(m_idleFixture, 0, lastY);

//  Common options
physics_fixture_set_density(m_idleFixture, 15)
physics_fixture_set_density(m_activeFixture, 15)

physics_fixture_set_friction(m_idleFixture, 0)
physics_fixture_set_friction(m_activeFixture, 0)

physics_fixture_set_restitution(m_idleFixture, 0)
physics_fixture_set_restitution(m_activeFixture, 0)

physics_fixture_set_linear_damping(m_idleFixture, 10)
physics_fixture_set_linear_damping(m_activeFixture, 10)

physics_fixture_set_angular_damping(m_idleFixture, 10)
physics_fixture_set_angular_damping(m_activeFixture, 10)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Physics
m_maxSpd = 3
m_turnSpd = 1
m_acceleration = 0.2
physics_fixture_bind(m_idleFixture, self)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

if(keyboard_check(m_up))
{
    if(phy_speed_x &gt; m_maxSpd)
        phy_speed_x = m_maxSpd
    else
        phy_speed_x += lengthdir_x(m_acceleration, -phy_rotation)
        
    if(phy_speed_x &gt; m_maxSpd)
        phy_speed_x = m_maxSpd
    else 
        phy_speed_y += lengthdir_y(m_acceleration, -phy_rotation)
}
else if(keyboard_check(m_down))
{
    if(phy_speed_x &gt; m_maxSpd)
        phy_speed_x = m_maxSpd
    else
        phy_speed_x += lengthdir_x(-m_acceleration, -phy_rotation)
        
    if(phy_speed_x &gt; m_maxSpd)
        phy_speed_x = m_maxSpd
    else 
        phy_speed_y += lengthdir_y(-m_acceleration, -phy_rotation)
}
else
{
    phy_speed_x = 0
    phy_speed_y = 0
}

if(keyboard_check(m_right))
    phy_rotation += m_turnSpd
else if(keyboard_check(m_left))
    phy_rotation -= m_turnSpd
    
if(keyboard_check(m_catch))
    catchEvent()
else if(keyboard_check(m_throw))
    throwEvent()

image_angle = direction

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>15</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>10</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>10</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
